generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model bids {
  active    Boolean? @default(true)
  created   DateTime @default(now())
  id        Int      @id @default(autoincrement())
  orders_id Int
  price     String
  signature String
  status    Int?     @default(0)
  updated   DateTime @default(now())
  users_id  Int
  orders    orders   @relation(fields: [orders_id], references: [id])
  users     users    @relation(fields: [users_id], references: [id])
}

model categories {
  active              Boolean?              @default(true)
  created             DateTime              @default(now())
  description         String?
  id                  Int                   @id @default(autoincrement())
  img_url             String?
  name                String                @unique
  updated             DateTime              @default(now())
  url                 String?
  type                String?               @default("ERC721")
  tokenURI            String?
  isOpenseaCompatible Boolean?              @default(false)
  isMetaTx            Boolean?              @default(false)
  categoriesaddresses categoriesaddresses[]
  orders              orders[]
  assetmigrate        assetmigrate[]
  disabled            Boolean?              @default(false)
  tokens              tokens[]
}

model categoriesaddresses {
  active           Boolean?   @default(true)
  address          String
  ethereum_address String
  categories_id    Int
  chain_id         String
  created          DateTime   @default(now())
  id               Int        @default(autoincrement())
  updated          DateTime   @default(now())
  categories       categories @relation(fields: [categories_id], references: [id])

  @@id([address, chain_id])
}

model tokens {
  token_id       String
  categories_id  Int
  image_url      String?
  description    String?
  external_url   String?
  name           String?
  name_lowercase String?    @default("")
  attributes     String?
  created        DateTime   @default(now())
  id             Int        @default(autoincrement())
  updated        DateTime   @default(now())
  categories     categories @relation(fields: [categories_id], references: [id])
  orders         orders[]

  @@id([token_id, categories_id])
}

model erc20tokens {
  active               Boolean?               @default(true)
  created              DateTime               @default(now())
  decimal              Int
  id                   Int                    @id @default(autoincrement())
  name                 String
  symbol               String                 @unique
  isMetaTx             Boolean                @default(true)
  updated              DateTime               @default(now())
  erc20tokensaddresses erc20tokensaddresses[]
  orders               orders[]
  market_price         String?
}

model erc20tokensaddresses {
  active      Boolean?    @default(true)
  address     String      @unique
  chain_id    String
  created     DateTime    @default(now())
  id          Int         @id @default(autoincrement())
  token_id    Int
  updated     DateTime    @default(now())
  erc20tokens erc20tokens @relation(fields: [token_id], references: [id])
}

model favourites {
  created  DateTime @default(now())
  id       Int      @id @default(autoincrement())
  order_id Int
  updated  DateTime @default(now())
  users_id Int
  orders   orders   @relation(fields: [order_id], references: [id])
  users    users    @relation(fields: [users_id], references: [id])
}

model orders {
  active             Boolean?        @default(true)
  chain_id           String
  categories_id      Int
  created            DateTime        @default(now())
  erc20tokens_id     Int
  expiry_date        DateTime?
  id                 Int             @id @default(autoincrement())
  maker_address      Int?
  min_price          String
  price              String
  price_per_unit     String?
  min_price_per_unit String?
  quantity           String?
  token_type         String?         @default("ERC721")
  usd_price          Float?
  signature          String?
  status             Int?            @default(0)
  taker_address      Int?
  taker_amount       String?
  maker_amount       String?
  tokens_id          String
  txhash             String?
  type               String
  buyer              Int?
  seller             Int?
  updated            DateTime        @default(now())
  views              Int?            @default(0)
  categories         categories      @relation(fields: [categories_id], references: [id])
  tokens             tokens          @relation(fields: [tokens_id, categories_id], references: [token_id, categories_id])
  erc20tokens        erc20tokens     @relation(fields: [erc20tokens_id], references: [id])
  buyer_users        users?          @relation("buyer_orders", fields: [buyer], references: [id])
  seller_users       users?          @relation("seller_orders", fields: [seller], references: [id])
  bids               bids[]
  notifications      notifications[]
  favourites         favourites[]
}

model users {
  active        Boolean?        @default(true)
  address       String          @unique
  created       DateTime        @default(now())
  id            Int             @id @default(autoincrement())
  updated       DateTime        @default(now())
  bids          bids[]
  favourites    favourites[]
  buyer_orders  orders[]        @relation("buyer_orders")
  seller_orders orders[]        @relation("seller_orders")
  notifications notifications[]
  assetmigrate  assetmigrate[]
}

model admins {
  active   Boolean? @default(true)
  username String   @unique
  password String
  created  DateTime @default(now())
  id       Int      @id @default(autoincrement())
  updated  DateTime @default(now())
}

model notifications {
  read     Boolean  @default(false)
  active   Boolean  @default(true)
  created  DateTime @default(now())
  id       Int      @id @default(autoincrement())
  message  String
  type     String   @default("ORDER")
  updated  DateTime @default(now())
  order_id Int
  orders   orders   @relation(fields: [order_id], references: [id])
  users    users    @relation(fields: [usersId], references: [id])
  usersId  Int
}

model assetmigrate {
  created       DateTime   @default(now())
  id            Int        @id @default(autoincrement())
  updated       DateTime   @default(now())
  type          String
  txhash        String     @unique
  exit_txhash   String?    @unique
  block_number  String?
  message       String?
  token_array   String[]
  users_id      Int
  categories_id Int
  status        Int?       @default(0)
  users         users      @relation(fields: [users_id], references: [id])
  categories    categories @relation(fields: [categories_id], references: [id])
}
